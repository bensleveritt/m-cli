#!/usr/bin/env bash

source "$( dirname "${BASH_SOURCE[0]}" )/../lib/defaults.sh"
source "$( dirname "${BASH_SOURCE[0]}" )/../lib/converters.sh"

declare command="$(basename "$0")"
declare subcommand="$1"

[ $# -gt 0 ] && shift

help(){
    cat<<__EOF__
    Usage:
      m network ls                            # list network interfaces
      m network location                      # get current location
      m network location ls                   # list locations
      m network location create XYZ           # create a location
      m network location delete XYZ           # delete a location
      m network location switch XYZ           # switch location
      m network defaultusername "your name"   # the default username when connecting (don't specify a name to disable)
      m network wakeonethernet  [ YES | NO ]  # whether to allow the computer to wake up if it receives a special network packet
      m network guestaccess     [ YES | NO ]  # whether to allow the guest user to access shared folders
__EOF__

}

list_netservices(){
    networksetup -listallhardwareports | while IFS= read -r line; do
        # if it is a device we will print the ip in the next line
        if echo ${line} | grep -i "Device" >/dev/null 2>&1; then
            printf "${line}\nIP:$(ipconfig getifaddr $(echo ${line} | cut -d: -f2 2>/dev/null))\n"

        else
            printf "${line}\n"
        fi
    done
}

defaultusername(){
    local username="$1"

    if [ -n "$1" ]; then
        defaults write com.apple.NetworkAuthorization UseDefaultName -bool true
        defaults write com.apple.NetworkAuthorization DefaultName "${username}"
    else
        defaults delete com.apple.NetworkAuthorization UseDefaultName
        defaults delete com.apple.NetworkAuthorization DefaultName
    fi

    defaults read com.apple.NetworkAuthorization UseDefaultName
    defaults read com.apple.NetworkAuthorization DefaultName
}

wakeonethernet(){
    choice="$(_mcli_convert_yes_no_to_integer "$1")"

    if [ -n "${choice}" ]; then
    sudo pmset -a womp "${choice}"
    sudo pmset -a ring "${choice}"
    fi

    sudo pmset -g | grep womp
    sudo pmset -g | grep ring
}

guestaccess(){
    value="$(_mcli_defaults_yes_no_to_boolean "/Library/Preferences/com.apple.AppleFileServer" \
                                              "guestAccess" \
                                              "$1" \
                                              "sudo")"
    value="$(_mcli_defaults_yes_no_to_boolean "/Library/Preferences/com.apple.smb.server" \
                                              "AllowGuestAccess" \
                                              "$1" \
                                              "sudo")"

    echo "${command} ${subcommand}: ${value}"
}

location(){
    case $1 in
        create)
            [ -z "$2" ] && help && exit 1;
            networksetup -createlocation $2
            ;;
        delete|rm)
            [ -z "$2" ] && help && exit 1;
            networksetup -deletelocation $2
            ;;
        switch)
            [ -z "$2" ] && help && exit 1;
            networksetup -switchtolocation $2
            ;;
        list|ls)
            echo "Locations: "
            networksetup -listlocations
            ;;
        *)
            echo "Current location: $(networksetup -getcurrentlocation)"
            ;;
    esac
}

case "${subcommand}" in
    help)
        help
        ;;
    ls|list)
        list_netservices
        ;;
    location)
        location "$@"
        ;;
    defaultusername)
        defaultusername "$@"
        ;;
    wakeonethernet)
        wakeonethernet "$@"
        ;;
    guestaccess)
        guestaccess "$@"
        ;;
    *)
        help
        ;;
esac

# vim: ts=4 sw=4 softtabstop=4 expandtab
